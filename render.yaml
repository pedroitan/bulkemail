services:
  - type: web
    name: emailbulk-web
    env: python
    buildCommand: "pip install -r requirements.txt"
    startCommand: "gunicorn wsgi:application -c gunicorn_config.py --bind=0.0.0.0:$PORT"
    healthCheckPath: /
    envVars:
      - key: FLASK_ENV
        value: production
      - key: PYTHONUNBUFFERED
        value: true
      - key: DATABASE_URL
        fromDatabase:
          name: emailbulk-db
          property: connectionString
      - key: AWS_ACCESS_KEY_ID
        sync: false
      - key: AWS_SECRET_ACCESS_KEY
        sync: false
      - key: AWS_REGION
        sync: false
      - key: SENDER_EMAIL
        sync: false
      - key: SES_CONFIGURATION_SET
        sync: false
      - key: SECRET_KEY
        generateValue: true
      - key: SCHEDULER_ENABLED
        value: "false"  # Disable APScheduler in favor of Render scheduled jobs
      - key: SQS_ENABLED
        value: "true"
      - key: SNS_DIRECT_DISABLED
        value: "true"
      - key: SQS_QUEUE_URL
        sync: false
      - key: SQS_REGION
        value: "us-east-2"
      - key: RATE_LIMIT_ENABLED
        value: "true"  # Keep the token bucket rate limiter active
    buildFilter:
      paths:
        - requirements.txt
    preDeployCommand: "python init_db.py && python create_batch_execution_tables.py"

  # Batch email processor service (template job - configure for specific campaigns)
  - type: cron
    name: emailbulk-batch-processor
    env: python
    schedule: "*/5 * * * *"  # Run every 5 minutes by default
    buildCommand: "pip install -r requirements.txt"
    startCommand: "python -m flask process_email_batch __CAMPAIGN_ID__ --batch-size 1000"
    envVars:
      - key: FLASK_ENV
        value: production
      - key: PYTHONUNBUFFERED
        value: true
      - key: DATABASE_URL
        fromDatabase:
          name: emailbulk-db
          property: connectionString
      - key: AWS_ACCESS_KEY_ID
        sync: false
      - key: AWS_SECRET_ACCESS_KEY
        sync: false
      - key: AWS_REGION
        sync: false
      - key: SENDER_EMAIL
        sync: false
      - key: SES_CONFIGURATION_SET
        sync: false
      - key: SECRET_KEY
        generateValue: true
      - key: SCHEDULER_ENABLED
        value: "false"  # Disable APScheduler in favor of Render scheduled jobs
      - key: SQS_ENABLED
        value: "true"
      - key: SNS_DIRECT_DISABLED
        value: "true"
      - key: SQS_QUEUE_URL
        sync: false
      - key: SQS_REGION
        value: "us-east-2"
      - key: RATE_LIMIT_ENABLED
        value: "true"  # Keep the token bucket rate limiter active
      - key: FLASK_APP
        value: wsgi.py
      - key: FLASK_ENV
        value: production
      - key: PYTHONUNBUFFERED
        value: true
      - key: DATABASE_URL
        fromDatabase:
          name: emailbulk-db
          property: connectionString
      - key: AWS_ACCESS_KEY_ID
        sync: false
      - key: AWS_SECRET_ACCESS_KEY
        sync: false
      - key: AWS_REGION
        sync: false
      - key: SENDER_EMAIL
        sync: false
      - key: SES_CONFIGURATION_SET
        sync: false
      - key: SECRET_KEY
        generateValue: true
    # Define scheduled jobs that will process emails in batches
    cron:
      # Process pending email batches every 5 minutes
      - command: "python -m flask process_email_batch __CAMPAIGN_ID__ --batch-size 1000 --start-index 0"
        schedule: "*/5 * * * *"
        # This job definition is a template: __CAMPAIGN_ID__ must be updated dynamically
        # See the README for instructions on setting up new scheduled jobs

databases:
  - name: emailbulk-db
    ipAllowList: []  # allow connections from everywhere
    plan: free
